// Generated by gencpp from file robot_sim/plannerResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_SIM_MESSAGE_PLANNERRESPONSE_H
#define ROBOT_SIM_MESSAGE_PLANNERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_sim
{
template <class ContainerAllocator>
struct plannerResponse_
{
  typedef plannerResponse_<ContainerAllocator> Type;

  plannerResponse_()
    : optimal_path()  {
    }
  plannerResponse_(const ContainerAllocator& _alloc)
    : optimal_path(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _optimal_path_type;
  _optimal_path_type optimal_path;





  typedef boost::shared_ptr< ::robot_sim::plannerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_sim::plannerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct plannerResponse_

typedef ::robot_sim::plannerResponse_<std::allocator<void> > plannerResponse;

typedef boost::shared_ptr< ::robot_sim::plannerResponse > plannerResponsePtr;
typedef boost::shared_ptr< ::robot_sim::plannerResponse const> plannerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_sim::plannerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_sim::plannerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robot_sim': ['/home/hcappel1/Multi_Agent_Systems/src/robot_sim/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_sim::plannerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_sim::plannerResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_sim::plannerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_sim::plannerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_sim::plannerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_sim::plannerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_sim::plannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34aebd8b0a17f86944f7baf8bcfd2d93";
  }

  static const char* value(const ::robot_sim::plannerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34aebd8b0a17f869ULL;
  static const uint64_t static_value2 = 0x44f7baf8bcfd2d93ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_sim::plannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_sim/plannerResponse";
  }

  static const char* value(const ::robot_sim::plannerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_sim::plannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] optimal_path\n\
";
  }

  static const char* value(const ::robot_sim::plannerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_sim::plannerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.optimal_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plannerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_sim::plannerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_sim::plannerResponse_<ContainerAllocator>& v)
  {
    s << indent << "optimal_path[]" << std::endl;
    for (size_t i = 0; i < v.optimal_path.size(); ++i)
    {
      s << indent << "  optimal_path[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.optimal_path[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIM_MESSAGE_PLANNERRESPONSE_H
